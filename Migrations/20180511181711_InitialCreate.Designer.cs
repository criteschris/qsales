// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using qsales.Models;
using System;

namespace qsales.Migrations
{
    [DbContext(typeof(QSalesDbContext))]
    [Migration("20180511181711_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("qsales.Models.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Bar");
                });

            modelBuilder.Entity("qsales.Models.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("qsales.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BarId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BarId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("qsales.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BarId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BarId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("qsales.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BarId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BarId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("qsales.Models.OperationHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("OperationHour");
                });

            modelBuilder.Entity("qsales.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BarId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BarId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("qsales.Models.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("SalesId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SalesId");

                    b.ToTable("Payroll");
                });

            modelBuilder.Entity("qsales.Models.Performer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BarId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BarId");

                    b.ToTable("Performer");
                });

            modelBuilder.Entity("qsales.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BarId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BarId");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("qsales.Models.Sales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BarId");

                    b.Property<decimal>("CreditCardAmount");

                    b.Property<DateTime>("EntryDate");

                    b.Property<int?>("EventId");

                    b.Property<decimal>("Fifties");

                    b.Property<decimal>("Fives");

                    b.Property<decimal>("Hundreds");

                    b.Property<decimal>("Ones");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("PerformerId");

                    b.Property<decimal>("Tens");

                    b.Property<decimal>("Twenties");

                    b.HasKey("Id");

                    b.HasIndex("BarId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PerformerId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("qsales.Models.SalesByHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<int>("ConditionId");

                    b.Property<int>("Customers");

                    b.Property<int>("OperationHourId");

                    b.Property<int>("SalesId");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("OperationHourId");

                    b.HasIndex("SalesId");

                    b.ToTable("SalesByHour");
                });

            modelBuilder.Entity("qsales.Models.SalesByLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<int>("LocationId");

                    b.Property<int>("SalesId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SalesId");

                    b.ToTable("SalesByLocation");
                });

            modelBuilder.Entity("qsales.Models.SalesByProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<int>("ProductTypeId");

                    b.Property<int>("SalesId");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SalesId");

                    b.ToTable("SalesByProductType");
                });

            modelBuilder.Entity("qsales.Models.Employee", b =>
                {
                    b.HasOne("qsales.Models.Bar", "Bar")
                        .WithMany("Employees")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("qsales.Models.Event", b =>
                {
                    b.HasOne("qsales.Models.Bar", "Bar")
                        .WithMany("Events")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("qsales.Models.Location", b =>
                {
                    b.HasOne("qsales.Models.Bar", "Bar")
                        .WithMany("Locations")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("qsales.Models.Organization", b =>
                {
                    b.HasOne("qsales.Models.Bar", "Bar")
                        .WithMany("Organizations")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("qsales.Models.Payroll", b =>
                {
                    b.HasOne("qsales.Models.Employee", "Employee")
                        .WithMany("Payrolls")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("qsales.Models.Sales", "Sales")
                        .WithMany("Payrolls")
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("qsales.Models.Performer", b =>
                {
                    b.HasOne("qsales.Models.Bar", "Bar")
                        .WithMany("Performers")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("qsales.Models.ProductType", b =>
                {
                    b.HasOne("qsales.Models.Bar", "Bar")
                        .WithMany("ProductTypes")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("qsales.Models.Sales", b =>
                {
                    b.HasOne("qsales.Models.Bar", "Bar")
                        .WithMany("Sales")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("qsales.Models.Event", "Event")
                        .WithMany("Sales")
                        .HasForeignKey("EventId");

                    b.HasOne("qsales.Models.Organization", "Organization")
                        .WithMany("Sales")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("qsales.Models.Performer", "Performer")
                        .WithMany("Sales")
                        .HasForeignKey("PerformerId");
                });

            modelBuilder.Entity("qsales.Models.SalesByHour", b =>
                {
                    b.HasOne("qsales.Models.Condition", "Condition")
                        .WithMany("SalesByHours")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("qsales.Models.OperationHour", "OperationHour")
                        .WithMany("SalesByHours")
                        .HasForeignKey("OperationHourId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("qsales.Models.Sales", "Sales")
                        .WithMany("SalesByHours")
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("qsales.Models.SalesByLocation", b =>
                {
                    b.HasOne("qsales.Models.Location", "Location")
                        .WithMany("SalesByLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("qsales.Models.Sales", "Sales")
                        .WithMany("SalesByLocations")
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("qsales.Models.SalesByProductType", b =>
                {
                    b.HasOne("qsales.Models.ProductType", "ProductType")
                        .WithMany("SalesByProductTypes")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("qsales.Models.Sales", "Sales")
                        .WithMany("SalesByProductTypes")
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
